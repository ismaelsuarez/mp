Objetivo: agregar en “Comprobantes” un submódulo Retenciones con configuración de rutas y un flujo que:

detecta retencion*.txt en la carpeta observada,

genera un PDF con fondo templates/FirmaDa.jpg y texto crudo tal cual viene (monoespaciado),

guarda el PDF en Ruta Local (obligatoria) y copia a Ruta Red 1/2 (opcionales),

al completar, borra el .txt original.
Sin impresión, sin email, sin WhatsApp en esta primera versión.

1) Auditoría rápida (no rompas nada)

Localizá cómo están hechos Recibos y Remitos (UI + IPC + renderer PDF + servicios). Reutilizá el patrón y dependencias (pdfkit, pdf-to-printer ya existe aunque acá no lo usamos).

Confirmá archivos/servicios existentes para componer PDFs (p. ej. src/pdfRenderer.ts o donde se registran fuentes) y el watcher que hoy procesa entradas por archivo (cola secuencial).

Verificá que existan los recursos:

templates/FirmaDa.jpg (si falta, dejá fallback a public/Noimage.jpg).

src/modules/fonts/CONSOLA.TTF y src/modules/fonts/CONSOLAB.TTF (registrarlas).

Tomá como muestra el contenido de /mnt/data/retencion.txt para parsear NUMERO y para render crudo del cuerpo.

Entregable de la auditoría (breve): lista de archivos a tocar/crear y confirmación de reutilización de servicios (máx. 10 líneas).

2) Implementación
2.1 UI (renderer) – public/config.html

En el acordeón Comprobantes, agregá una sección “Retenciones” con:

Ruta Local (input obligatorio),

Ruta Red 1 (opcional),

Ruta Red 2 (opcional),

botón Guardar configuración.

Comportamiento igual a Recibos/Remitos: leer y guardar vía IPC (retencion:get-config / retencion:save-config). Reutilizá el mismo estilo/feedback.

2.2 Config persistente – config/retencion.config.json

Estructura inicial:

{
  "outLocal": "C:\\1_AFIP",
  "outRed1": "",
  "outRed2": ""
}

2.3 Preload – src/preload.ts

Exponer:

retencion: {
  getConfig: () => ipcRenderer.invoke('retencion:get-config'),
  saveConfig: (cfg: { outLocal?: string; outRed1?: string; outRed2?: string }) =>
    ipcRenderer.invoke('retencion:save-config', cfg),
},

2.4 IPC (main) – src/main.ts

Handlers:

ipcMain.handle('retencion:get-config', async () => readJsonSafe('config/retencion.config.json', { outLocal:'', outRed1:'', outRed2:'' }));
ipcMain.handle('retencion:save-config', async (_e, cfg) => mergeWriteJson('config/retencion.config.json', cfg));


Watcher: ampliar la cola existente para también observar archivos retencion*.txt en la carpeta monitorizada (misma que se usa para .fac). Al detectar uno, encolarlo al retencionProcessor.

2.5 Procesador principal – src/modules/retenciones/retencionProcessor.ts

Responsabilidades:

Leer el .txt (codificación utf8).

Extraer NUMERO para el nombre de archivo (prefijo RET_ + número). Ej: RET_2025-00002800.pdf.

Construir carpeta de salida: path.join(outLocal, 'Retenciones', 'F' + YYYYMM) (crear recursivo).

Generar el PDF local con fondo templates/FirmaDa.jpg (fallback a public/Noimage.jpg si no existe).

Fuente monoespaciada: registrar CONSOLA.TTF como “regular” y CONSOLAB.TTF como “bold”; usar “regular” para todo el cuerpo.

Render: texto tal cual el .txt (sin remaquetar): doc.text(fullText, x=40, y=40, { width: pageWidth-80, lineGap: 2 }) luego de dibujar el fondo a página completa.

Copiar a Red1 y Red2 si están configuradas (desde la copia local).

Al terminar OK, borrar el .txt original; si falla, mover el .txt a errores/ con timestamp.

Sugerido (esqueleto):

export async function processRetencionTxt(fullPath: string) {
  const cfg = readRetencionCfg(); // lee config/retencion.config.json
  assertDir(cfg.outLocal, 'Ruta Local (retenciones) es obligatoria');

  const raw = fs.readFileSync(fullPath, 'utf8');
  const numero = (raw.match(/NUMERO:\s*([0-9\-]+)/i)?.[1] || 'SINNUM'); // RET_XXXX.pdf
  const yyyymm = dayjs().format('YYYYMM');
  const outDir = path.join(cfg.outLocal, 'Retenciones', `F${yyyymm}`);
  fs.mkdirSync(outDir, { recursive: true });

  const pdfName = `RET_${numero}.pdf`;
  const outLocalPath = path.join(outDir, pdfName);

  await renderRetencionPdf({
    text: raw,
    outputPath: outLocalPath,
    bgPath: tryPath('templates/FirmaDa.jpg', 'public/Noimage.jpg'),
    fonts: {
      regular: 'src/modules/fonts/CONSOLA.TTF',
      bold:    'src/modules/fonts/CONSOLAB.TTF',
    },
  });

  for (const dst of [cfg.outRed1, cfg.outRed2].filter(Boolean)) {
    const dstDir = path.join(dst!, 'Retenciones', `F${yyyymm}`);
    fs.mkdirSync(dstDir, { recursive: true });
    fs.copyFileSync(outLocalPath, path.join(dstDir, pdfName));
  }

  fs.unlinkSync(fullPath); // éxito → borra el .txt
}

2.6 Render PDF simple – src/modules/retenciones/retencionRenderer.ts

Usá pdfkit (misma dependencia que Recibo/Remito). Fondo antes del texto para no taparlo.

import PDFDocument from 'pdfkit';
export async function renderRetencionPdf({ text, outputPath, bgPath, fonts }) {
  const doc = new PDFDocument({ size:'A4', margin: 36 });
  const stream = fs.createWriteStream(outputPath);
  doc.pipe(stream);

  // Background
  if (fs.existsSync(bgPath)) {
    const { width, height } = doc.page;
    doc.image(bgPath, 0, 0, { width, height });
  }

  // Fonts
  if (fonts?.regular && fs.existsSync(fonts.regular)) doc.registerFont('regular', fonts.regular);
  if (fonts?.bold && fs.existsSync(fonts.bold))       doc.registerFont('bold', fonts.bold);

  doc.font('regular').fontSize(10);
  doc.text(text || '', 40, 40, { width: doc.page.width - 80, lineGap: 2 });
  doc.end();

  await new Promise((res, rej) => { stream.on('finish', res); stream.on('error', rej); });
}

2.7 Integración con la cola del watcher

Donde hoy se enrutan .fac a sus procesadores, agregá:

if (/retencion.*\.txt$/i.test(fileName)) {
  await processRetencionTxt(fullPath);
  return;
}


Mantener el comportamiento secuencial (no paralelizar) igual que Recibo/Remito.

3) Pruebas de aceptación (manual)

En UI → Comprobantes → Retenciones, guardar:

Ruta Local = C:\1_AFIP (o la que uses),

Rutas de Red vacías (para probar mínimo).

Dejar en la carpeta observada un archivo retencion.txt igual al ejemplo (contiene NUMERO: 2025-00002800).

Esperado:

PDF local en C:\1_AFIP\Retenciones\FYYYYMM\RET_2025-00002800.pdf.

El .txt borrado tras generar/copiar.

Si configurás Red1/Red2, se copian las mismas rutas espejo.

Si el fondo no existe, se usa el fallback y el texto se renderiza igual.

Si falta Ruta Local, el procesador no corre y debe loguear error claro.

4) Entregables

Código nuevo:

src/modules/retenciones/retencionProcessor.ts

src/modules/retenciones/retencionRenderer.ts

Cambios en:

public/config.html (sección Retenciones),

src/preload.ts (APIs retencion.*),

src/main.ts (IPC + watcher),

config/retencion.config.json (semilla).

README corto en /docs/retenciones.md con: flujo, dependencias, rutas, ejemplo de salida y check-list de pruebas.

Commit sugerido:
feat(retenciones): UI + IPC + watcher + PDF monoespaciado con fondo; copia a red y cleanup .txt